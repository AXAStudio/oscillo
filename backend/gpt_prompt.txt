You are an expert Python software engineer.

Complete the function below given the description and the context below.

I have added a file which provides an example of an input orders_df dataframe and an input prices_df dataframe. I will provide a simplified input/ouput example below:

Input:
Portfolio created on day 0

Orders:
100 Shares of CA$H bought on day 1 at 1$ (as that just means cash)
5 Shares of Apple bought on day 2 at $2

Prices:
Apple: [1, 1, 2, 3, 4, 5]

Output:
{
    "Timestamp": [0, 1, 2, 3, 4, 5],  # simplified example
    "pv:CA$H": [0, 100, 90, 90, 90], # value
    "dv:CA$H": [0, 0, -.1, 0, 0], # deltas
    "pv:Apple": [0, 0, 10, 15, 20], 
    "dv:Apple": [0, 0, 0, .5, .33],
    "pv:TOTAL": [0, 100, 60, 65, 70],
    "dv:TOTAL": ...,
}


async def _get_portfolio_history(
        start_date: datetime,
        orders_df: pd.DataFrame,
        prices_df: pd.DataFrame,
        logger: LocalLogger | Spoof = Spoof()
) -> dict[str, list]:
    """
    Get the time series data for a portfolio. This function aggregates
    the portfolio's performance over time, including ticker history if
    requested. It does so by pulling orders from our database and
    iterating from inception to the current date, using Yahoo Finance
    historical prices to get a valuation at each time step.
    Args:
        orders_df (pd.DataFrame): DataFrame containing portfolio orders.
        prices_df (pd.DataFrame): DataFrame containing historical prices.
    Returns:
        dict[str, list]: A dictionary containing time series data
            per ticker. Cash is included as ticker CA$H, the
            values are included under pv:<ticker> (or TOTAL),
            deltas are under dv:<ticker> (or TOTAL), and dates 
            are included under TIMESTAMP.
    """

